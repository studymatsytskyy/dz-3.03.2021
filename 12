c = 0
class Clock12:
    """ version 7"""

    def __init__(self, *args):
        self._h: int = 0
        self._m: int = 0
        self._s: int = 1
        self._l: int = 100
        self.increase()
        self.numb = self.count
        if len(args) == 0:
            return
        elif len(args) > 2:
            raise TypeError('Clock12.__init__ can not take more than 2 positional arguments.')
        elif len(args) == 2:
            self.set_time(args[0], args[1])
        else:
            if isinstance(args[0], int):
                self._from_int(args[0])
            elif isinstance(args[0], Clock12):
                self._assign(args[0])
            else:
                raise TypeError('The single argument of Clock12.__init__ should be int or Clock12')

    @property
    def limit(self):
        return self._l

    @property
    def count(self):
        global c
        return c

    @property
    def hour(self):
        return self._h

    @property
    def minute(self):
        return self._m

    @property
    def time(self):
        return self.hour * self.max_minute + self.minute

    @time.setter
    def time(self, minute: int):
        self._from_int(minute)

    @property
    def step(self):
        return self._s

    @property
    def contrafact(self):
        return self.contr

    def set_time(self, h: int, m: int):
        self._is_good_time(h, m)
        self._set_time(h, m)

    @classmethod
    def _is_good_time(cls, h: int, m: int):
        return cls._is_good_hour(h) and cls._is_good_minute(m)

    @classmethod
    def _is_good_hour(cls, h: int):
        if not isinstance(h, int):
            raise TypeError(str(type(h)) + ' is improper for hour value')
        if 0 <= h < cls.max_hour():
            return True
        raise ValueError(str(h) + ' is improper for hour value')

    @classmethod
    def _is_good_minute(cls, m: int):
        if not isinstance(m, int):
            raise TypeError(str(type(m)) + ' is improper for minute value')
        if 0 <= m < cls.max_minute():
            return True
        raise ValueError(str(m) + ' is improper for minute value')

    def _is_contrafact(self):
        if self.numb > self.limit:
            print('Clock is contrafact.')
        else:
            print('Clock isn`t contrafact.')

    def _set_time(self, h: int, m: int):
        self._h = h
        self._m = m

    def output(self):
        print('h=', self.hour, 'm=', self.minute, 'count=', self.count)

    def input(self):
        h0 = int(input(f'Enter hour (0..{self.max_hour() - 1}): '))
        m0 = int(input(f'Enter minute (0..{self.max_minute() - 1}): '))
        self.set_time(h0, m0)

    def copy(self):
        return self.__class__(self)

    def _assign(self, other):
        self._set_time(other.hour, other.minute)

    def _from_int(self, minute: int):
        minute %= self.max_hour() * self.max_minute()
        self._set_time(*divmod(minute, self.max_minute()))

    def increase(self):
        global c
        c += self.step

    @staticmethod
    def max_minute():
        return 60

    @staticmethod
    def max_hour():
        return 12

    @classmethod
    def first_pair(cls):
        return cls(8, 40)

    def __eq__(self, other):
        return self.hour == other.hour and self.minute == other.minute

    def __lt__(self, other):
        return self.hour < other.hour or \
               self.hour == other.hour and self.minute < other.minute

    def __le__(self, other):
        return self < other or self == other

    def __int__(self):
        return self.hour * self.max_minute() + self.minute

    def __radd__(self, other):
        return self.__add__(other)

    def __iadd__(self, other):
        if isinstance(other, Clock12):
            return self._iadd_Clock(other)
        elif isinstance(other, int):
            return self._iadd_int(other)
        else:
            return NotImplemented

    def _iadd_int(self, minute):
        h, m = divmod(self.minute + minute, self.max_minute())
        h += self.hour
        h %= self.max_hour()
        self._set_time(h, m)
        return self

    # noinspection PyPep8Naming
    def _iadd_Clock(self, other):
        return self._iadd_int(int(other))

    def __add__(self, other):
        tmp = self.copy()
        return tmp.__iadd__(other)  # for preventing infinite recursion in case tmp+=other

    def __repr__(self):
        return f'{self.__class__.__name__}({self.hour}, {self.minute})'

    def __str__(self):
        return f'h = {self.hour}, m = {self.minute}'
